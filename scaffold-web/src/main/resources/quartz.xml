<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/task  
                        http://www.springframework.org/schema/task/spring-task-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"
	xmlns:task="http://www.springframework.org/schema/task">


	   <task:annotation-driven/>
	   
	<!-- 配置quartz注解方式自动调度任务 -->
	<context:annotation-config/>
        <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <context:component-scan base-package="com.cpsh.service.ServiceImpl.PersonService"/><!-- 配置了spring的scheduled注解进行扫描自动执行 -->
    
     <!--
        spring和quartz的整合对版本是有要求的。
        spring3.1以下的版本必须使用quartz1.x系列，3.1以上的版本才支持quartz 2.x，不然会出错。
                至于原因，则是spring对于quartz的支持实现，org.springframework.scheduling.quartz.CronTriggerBean继承了org.quartz.CronTrigger，
                在quartz1.x系列中org.quartz.CronTrigger是个类，而在quartz2.x系列中org.quartz.CronTrigger变成了接口，
                从而造成无法用spring的方式配置quartz的触发器（trigger）。
                
                解决办法有两种：
        1.降低Quartz版本，降到1.X去。

        2.升级Spring版本到3.1+，根据Spring的建议，将原来的**TriggerBean替换成**TriggerFactoryBean，
                例如org.springframework.scheduling.quartz.CronTriggerBean 就可以替换成org.springframework.scheduling.quartz.CronTriggerFactoryBean。替换之后问题解决
      
            在Spring配置和Quartz集成内容时，有两点需要注意
           １、在<Beans>中不能够设置default-lazy-init="true",否则定时任务不触发，如果不明确指明default-lazy-init的值，默认是false。
           ２、在<Beans>中不能够设置default-autowire="byName"的属性，否则后台会报org.springframework.beans.factory.BeanCreationException错误，这样就不能通过Bean名称自动注入，必须通过明确引用注入
    -->
    
    <!-- Scheduler 调度工厂的配置 -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
	       <property name="triggers">  
	           <list>  
	              <ref bean="testTrigger"/>  
	           </list>  
	       </property>  
	       <property name="autoStartup" value="false"/> <!-- 启动 --> 
	       
	</bean>  
	
	<!-- 配置触发器 -->
	<bean id="testTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" lazy-init="false">
        <property name="jobDetail">
            <ref bean="jobTask" />
        </property>
       <property name="cronExpression" value="*/5 * * * * ?"/><!-- 每隔5秒钟触发一次 -->
    </bean>
    
    <!-- 
		    1）Cron表达式的格式：秒 分 时 日 月 周 年(可选)。
		
		               字段名                 允许的值                        允许的特殊字符  
		               秒                         0-59                               , - * /  
		               分                         0-59                               , - * /  
		               小时                   0-23                               , - * /  
		               日                         1-31                               , - * ? / L W C  
		               月                         1-12 or JAN-DEC          , - * /  
		               周几                     1-7 or SUN-SAT            , - * ? / L C #  
		               年 (可选字段)     empty, 1970-2099      , - * /
               “?”字符：表示不确定的值
               “,”字符：指定数个值
               “-”字符：指定一个值的范围
               “/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m
               “L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X
               “W”字符：指定离给定日期最近的工作日(周一到周五)
               “#”字符：表示该月第几个周X。6#3表示该月第3个周五
	         2）Cron表达式范例：
	                 每隔5秒执行一次：*/5 * * * * ?
	                 每隔1分钟执行一次：0 */1 * * * ?
	                 每天23点执行一次：0 0 23 * * ?
	                 每天凌晨1点执行一次：0 0 1 * * ?
	                 每月1号凌晨1点执行一次：0 0 1 1 * ?
	                 每月最后一天23点执行一次：0 0 23 L * ?
	                 每周星期天凌晨1点实行一次：0 0 1 ? * L
	                 在26分、29分、33分执行一次：0 26,29,33 * * * ?
	                 每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?
     -->
    
    <!-- JobDetail的配置 
    使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法-
    -->
    <bean id="jobTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="testJob"/>
        </property>
        <property name="targetMethod">
            <value>testQuartz</value>
        </property>
         <!--将并发设置为false 假如targetMethod方法的执行时间超过触发器配置的执行时间，在执行完之前即使时间已经超过了5秒，
                         下一个定时计划执行任务仍不会被开启，如果是true，则不管是否执行完，时间到了都将开启-->  
        <property name="concurrent" value="false" /> 
    </bean>
    
	<!-- 业务类的配置  -->
	<!--     说明：业务类不需要继承任何父类，也不需要实现任何接口，只是一个普通的java类。 -->
    <bean id="testJob" class="com.cpsh.quartz.job.example1.TestJob"/>
    
    
	
	
</beans>